# Generated by Django 3.0.6 on 2020-05-13 19:15

import app.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlockedUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_id', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('reason', models.TextField(blank=True, null=True)),
                ('type', models.CharField(blank=True, choices=[('Shadown Ban', 'Shadow Ban'), ('Force Block', 'Force Block')], max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('title', models.CharField(max_length=255)),
                ('cms_id', models.IntegerField(primary_key=True, serialize=False)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmailText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_case', models.CharField(blank=True, choices=[('Created in fall', 'Created in fall'), ('Created in spring', 'Created in spring'), ('Reviewed and (will not fix, or duplicate, or not an error, or major book revision)', 'Reviewed and (will not fix, or duplicate, or not an error, or major book revision)'), ('Reviewed and Approved', 'Reviewed and Approved'), ('Completed and Approved', 'Completed and Approved'), ('Completed and Sent to Customer Support', 'Completed and Sent to Customer Support'), ('More Information Requested', 'More Information Requested')], max_length=100, null=True)),
                ('email_subject_text', models.CharField(blank=True, max_length=255, null=True)),
                ('email_body_text', models.TextField()),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'email text',
                'verbose_name_plural': 'email text',
            },
        ),
        migrations.CreateModel(
            name='Errata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('openstax_book', models.CharField(blank=True, max_length=255, null=True)),
                ('is_assessment_errata', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True)),
                ('assessment_id', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('New', 'New'), ('Editorial Review', 'Editorial Review'), ('Reviewed', 'Reviewed'), ('Completed', 'Completed')], default='New', max_length=100)),
                ('resolution', models.CharField(blank=True, choices=[('Duplicate', 'Duplicate'), ('Not An Error', 'Not An Error'), ('Will Not Fix', 'Will Not Fix'), ('Approved', 'Approved'), ('Major Book Revision', 'Major Book Revision'), ('Technical Error', 'Technical Error'), ('Sent to Customer Support', 'Sent to Customer Support'), ('More Information Requested', 'More Information Requested')], max_length=100, null=True)),
                ('reviewed_date', models.DateField(blank=True, editable=False, null=True)),
                ('corrected_date', models.DateField(blank=True, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('junk', models.BooleanField(default=False, help_text='Flagging the erratum as junk will automatically flag it for archive as well.')),
                ('location', models.TextField(blank=True, null=True)),
                ('detail', models.TextField()),
                ('resolution_notes', models.TextField(blank=True, help_text='Leaving the resolution notes blank will allow the field to auto-fill with the appropriate text based on status/resolution selections.', null=True)),
                ('resolution_date', models.DateField(blank=True, null=True)),
                ('internal_notes', models.TextField(blank=True, help_text='Only users with app admin access can view and edit the contents of this field.', null=True)),
                ('error_type', models.CharField(blank=True, choices=[('Other factual inaccuracy in content', 'Other factual inaccuracy in content'), ('General/pedagogical suggestion or question', 'General/pedagogical suggestion or question'), ('Incorrect answer, calculation, or solution', 'Incorrect answer, calculation, or solution'), ('Broken link', 'Broken link'), ('Typo', 'Typo'), ('Other', 'Other')], max_length=100, null=True)),
                ('error_type_other', models.CharField(blank=True, max_length=255, null=True)),
                ('number_of_errors', models.PositiveIntegerField(default=1)),
                ('resource', models.CharField(blank=True, choices=[('Textbook', 'Textbook'), ('iBooks version', 'iBooks version'), ('Instructor solution manual', 'Instructor solution manual'), ('Student solution manual', 'Student solution manual'), ('OpenStax Tutor', 'OpenStax Tutor'), ('OpenStax Concept Coach', 'OpenStax Concept Coach'), ('Rover by OpenStax', 'Rover by OpenStax'), ('OpenStax + SE', 'OpenStax + SE'), ('Kindle', 'Kindle'), ('Other', 'Other')], max_length=100, null=True)),
                ('resource_other', models.CharField(blank=True, max_length=255, null=True)),
                ('submitter_email_address', models.EmailField(blank=True, max_length=254, null=True)),
                ('submitted_by_account_id', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), app.models.is_user_blocked])),
                ('file_1', models.FileField(blank=True, null=True, upload_to='app/user_uploads/1/')),
                ('file_2', models.FileField(blank=True, null=True, upload_to='app/user_uploads/2/')),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='app.Book')),
                ('duplicate_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='duplicate_report', to='app.Errata')),
                ('submitted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'erratum',
                'verbose_name_plural': 'erratum',
            },
        ),
        migrations.CreateModel(
            name='InternalDocumentation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='app/internal/')),
                ('errata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.Errata')),
            ],
        ),
    ]
